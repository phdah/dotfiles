# Autocomplete in cli
autoload bashcompinit
bashcompinit
autoload -Uz compinit
compinit
source /opt/homebrew/etc/bash_completion.d/az

# Aliases
# Aliases
alias sudo='sudo ' # Allow to append users alias etc to sudo commands
alias ls='eza'
alias ll='eza -alh'
alias vim='nvim'
alias nb='nvim ~/repos/privat/logbook/README.md'
alias tree='eza --tree'
alias act='act --container-architecture linux/amd64'
alias dbsqlcli='dbsqlcli --table-format ascii'
alias bat='bat --theme=Nord'
alias insta=$HOME/repos/privat/insta-infra/run.sh
alias ns='vim ~/repos/dotfiles/nvim/lua/phdah/lazy.lua'
alias tf='terraform'
alias k='kubectl'
# Git alias
alias pgp='source ~/repos/dotfiles/scripts/set_python_path_to_git_root.sh'
alias pcpp='source ~/repos/dotfiles/scripts/set_cpp_include_path.sh'
alias vimconflict='vim $(rg -l "<<<<<<< HEAD")'
alias gitl='git log --graph --oneline'
alias gits='git status'
alias gitp='git pull'
alias gitd='git diff'
alias gitb='git branch'
alias gitc='git checkout'

# Functions
function lg() {
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
            rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
    fi
}
setenv() {
  export "$1=$2"
}
function gitall() {
    git status && git add --all && git commit -m "$1" && git push
}
function gitallremote() {
    git -C "$1" status && git -C "$1" add --all && git -C $1 commit -m $2 && git -C "$1" push
}
function gitr() {
    git rebase -i HEAD~$1
    echo 'now run: git push -f origin YOUR_BRANCH'
}
function cat() {
    bat $1 --style=plain --paging=never --theme=Nord
}
function rgf() {
    rg --files | rg $1
}
function vimrg() {
    vim $(rg $1 -l)
}
function vimrgf() {
    vim $(rg --files | rg $1)
}
function sedall() {
    sed -i "s/$1/$2/g" $(rg $1 -l)
}
function sedtrailingspace() {
    sed -i 's/\s\+$//g' $(rg --files)
}

# Default to emacs keybindings
bindkey -e

# Word skipping
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey ";5C" forward-word
bindkey ";5D" backward-word

# Home/End/Del
bindkey  "^[[H"    beginning-of-line
bindkey  "^[[F"    end-of-line
bindkey  "^[[3~"   delete-char
bindkey  "^[[1;9D" beginning-of-line
bindkey  "^[[1;9C" end-of-line

# PgUp/Down
bindkey "^[[5~" history-beginning-search-backward
bindkey "^[[6~" history-beginning-search-forward

bindkey -s "^ff" "vim +\":lua require('snacks').picker.smart({ cwd = require('nvim-utils').Git.find_git_root() })\"^j"
bindkey -s "^fF" "vim +\":lua require('snacks').picker.smart({ cwd = '~' })\"^j"
bindkey -s "^fr" "vim +\":lua require('snacks').picker.grep({ layout = { preview = true }, cwd = require('nvim-utils').Git.find_git_root() })\"^j"
bindkey -s "^fR" "vim +\":lua require('snacks').picker.recent()\"^j"
bindkey -s "^fp" "vim +\":lua require('snacks').picker.projects()\"^j"
bindkey -s "^fx" "vim +\":lua require('snacks').picker.explorer({ cwd = require('nvim-utils').Git.find_git_root(), auto_close = true, })\"^j"

bindkey -s "^fo" "vim +\":Octo pr list\"^j"
bindkey -s "^z" "fg ^j"

### Set up prompt ###

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=$HOME/.zsh_history
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt HIST_IGNORE_ALL_DUPS
setopt EXTENDED_HISTORY

# Show current git branch right of prompt
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
zstyle ':vcs_info:git:*' formats '%b'

# Timer logic
start_timer() {
    timer_start=$(($(gdate +%s%0N)/1000000))
}

update_timer() {
    if [ -n "$timer_start" ]; then
        now=$(($(gdate +%s%0N)/1000000))
        elapsed_ms=$(($now - $timer_start))

        if [ "$elapsed_ms" -lt 1000 ]; then
            # Less than 1 second, show in milliseconds
            elapsed="${elapsed_ms}ms"
        else
            # Convert to seconds
            total_seconds=$((elapsed_ms / 1000))
            seconds=$((total_seconds % 60))
            minutes=$((total_seconds / 60 % 60))
            hours=$((total_seconds / 3600))

            if [ "$hours" -gt 0 ]; then
                elapsed="${hours}h ${minutes}m ${seconds}s"
            elif [ "$minutes" -gt 0 ]; then
                elapsed="${minutes}m ${seconds}s"
            else
                elapsed="${seconds}s"
            fi
        fi
    else
        elapsed=""
    fi
}

# Register hooks
autoload -Uz add-zsh-hook
add-zsh-hook preexec start_timer
add-zsh-hook precmd update_timer

# Custom right-aligned prompt logic
draw_prompt() {
    local NEWLINE=$'\n'
    # Get terminal width
    local TERM_WIDTH=$(tput cols)

    # Get the full directory path expanded
    local DIR_PATH="${PWD/#$HOME/~}"

    # If a virtual environment is active, prepend it
    if [[ -n "$VIRTUAL_ENV" ]]; then
        local VENV="($(basename $VIRTUAL_ENV)) "
    else
        local VENV=""
    fi

    # Construct the left part with virtual environment
    local LEFT="%b${VENV}%F{#D08770}%B%~%b"

    # Right part (timer + branch)
    local RIGHT="%F{#4C566A}${elapsed} %F{#A3BE8C}${vcs_info_msg_0_}%f%b"

    # Input part
    local INPUT="%F{#D08770}%% %b"

    # Real visible length of left and right segments
    local LEFT_LEN=$(( ${#DIR_PATH} + ${#VENV} ))
    local RIGHT_LEN=${#RIGHT}

    # Calculate padding
    local EXTRA_PADDING=25
    local SPACE_LEFT=$((TERM_WIDTH - LEFT_LEN - RIGHT_LEN + EXTRA_PADDING))
    local FILLER=""

    if (( SPACE_LEFT > 0 )); then
        FILLER=$(printf '%*s' $SPACE_LEFT)
    fi

    # Final prompt assembly
    PROMPT="${LEFT}${FILLER}${RIGHT}${NEWLINE}${INPUT}"
}

# Register the custom prompt renderer
autoload -Uz add-zsh-hook
add-zsh-hook precmd draw_prompt

# Set max file descriptor limit, used by watchman
ulimit -n 8192

# Export config dir
export XDG_CONFIG_HOME="$HOME/.config"

# Syntax highligthing
# TODO: use the fast-syntax-highlighting.plugin.zsh instead. Then the arch
# and ubuntu one are the same.
#source $HOME/repos/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /opt/homebrew/opt/zsh-fast-syntax-highlighting/share/zsh-fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
source /opt/homebrew/opt/fzf/shell/key-bindings.zsh
source /opt/homebrew/opt/fzf/shell/completion.zsh
export FZF_COMPLETION_DIR_COMMANDS="cd ls pushd rmdir tree"
_fzf_compgen_path() {
    rg --files --hidden . "$1"
}
# TODO: Fix a path search
# _fzf_compgen_dir() {
#     rg --files --hidden . "$1" | awk -F/ 'NF{NF-=1}1' | uniq
# }


# Set executable color to green
export LS_COLORS="$LS_COLORS:ex=01;32"

export EDITOR=$(which nvim)

# Set keybinding for editing commands
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^e" edit-command-line

# Dez
export DEZ_LIB=$HOME/repos/privat/dez
export DEZ_HOME=/usr/local/etc/dez
export DEZ_CONFIG=$HOME/.config/dez

# Lua stuff
# Lua(JIT) shared library path
export LUA_CPATH="./?.dylib;./lib?.dylib;../lib/lib?.dylib;./lib/lib?.dylib;./build/lib?.dylib;./build/lib/lib?.dylib;/opt/homebrew/lib/lua/5.4/lib?.dylib;$DEZ_HOME/lib/lib?.dylib"
# clang++ include path
export CPLUS_INCLUDE_PATH=/usr/local/include/:/opt/homebrew/opt/*/include:/opt/homebrew/opt/postgresql@14/include/postgresql@14/:/opt/homebrew/include/luajit-2.1/:../../core/include:../include:../../include:$CPLUS_INCLUDE_PATH
# Set lua path for luajit, lua and luarocks
export LUA_PATH="./?.lua;/opt/homebrew/share/luajit-2.1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/opt/homebrew/share/lua/5.1/?.lua;/opt/homebrew/share/lua/5.1/?/init.lua;/opt/homebrew/Cellar/luarocks/3.9.2/share/lua/5.4/?.lua;/opt/homebrew/share/lua/5.4/?.lua;/opt/homebrew/share/lua/5.4/?/init.lua;/opt/homebrew/lib/lua/5.4/?.lua;/opt/homebrew/lib/lua/5.4/?/init.lua;./?.lua;./?/init.lua;/Users/Philip.Sjoberg/.luarocks/share/lua/5.4/?.lua;/Users/Philip.Sjoberg/.luarocks/share/lua/5.4/?/init.lua"

# Mojo paths
export MOJO_PYTHON_LIBRARY=/opt/homebrew/Cellar/python@3.10/3.10.13/Frameworks/Python.framework/Versions/3.10/lib/python3.10/config-3.10-darwin/libpython3.10.dylib

# Java path
export JAVA_HOME=/opt/homebrew/opt/openjdk@17/libexec/openjdk.jdk/Contents/Home

# Spark path
export SPARK_HOME=/opt/homebrew/Cellar/apache-spark/3.5.5/libexec

# Python debuger
export PYDEVD_WARN_SLOW_RESOLVE_TIMEOUT=2

# Set default fzf stdout
export FZF_DEFAULT_COMMAND="rg --hidden -l '' -g '!.git/'"

# Needed for image.nvim and Magick
export DYLD_LIBRARY_PATH="/opt/homebrew/lib/"

# Path
source $HOME/.paths
# Envs
source $HOME/.envvar

